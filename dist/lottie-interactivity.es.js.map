{"version":3,"file":"lottie-interactivity.es.js","sources":["../src/lottie-interactivity.js"],"sourcesContent":["const DEFAULT_OPTIONS = {\n  player: 'lottie-player',\n};\nconst LOTTIE_PLAYER_NODE = 'LOTTIE-PLAYER';\nconst ERROR_PREFIX = '[lottieInteractivity]:';\n/**\n * LottieFiles interactivity for Lottie\n */\nexport class LottieInteractivity {\n  constructor({ actions, container, mode, player, ...options }) {\n    // Save the original player entered by user, used for interaction chaining / loading animations on the fly\n    this.enteredPlayer = player;\n\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        let message = ERROR_PREFIX + \"Specified player:\" + player + \" is invalid.\";\n\n        throw new Error(message);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.loadedAnimation = this.player.path + this.player.fileName + \".json\";\n    this.attachedListeners = false;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n\n    // Interaction chaining\n    this.interactionIdx = 0;\n    this.oldInterctionIdx = 0;\n    this.clickCounter = 0;\n    this.playCounter = 0;\n    this.stateHandler = new Map();\n    this.transitionHandler = new Map();\n  }\n\n  getContainerVisibility() {\n    // Get the bounding box for the lottie player or container\n    const { top, height } = this.container.getBoundingClientRect();\n\n    // Calculate current view percentage\n    const current = window.innerHeight - top;\n    const max = window.innerHeight + height;\n    return current / max;\n  }\n\n  getContainerCursorPosition(cursorX, cursorY) {\n    const { top, left, width, height } = this.container.getBoundingClientRect();\n\n    const x = (cursorX - left) / width;\n    const y = (cursorY - top) / height;\n\n    return { x, y };\n  }\n\n  initScrollMode() {\n    this.player.stop();\n    window.addEventListener('scroll', this.#scrollHandler, true);\n  }\n\n  initCursorMode() {\n    // To have click and hover interaction, force to only have that type and single action\n    // If there are multiple actions, click and hover are ignored\n    if (this.actions &&\n      this.actions.length === 1) {\n      if (this.actions[0].type === \"click\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('click', this.#clickHoverHandler);\n      } else if (this.actions[0].type === \"hover\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('mouseenter', this.#clickHoverHandler);\n\n        // For mobile\n        this.container.addEventListener('touchstart', this.#clickHoverHandler, { passive: true });\n      } else if (this.actions[0].type === \"toggle\") {\n        this.player.loop = false;\n        this.player.stop();\n        this.container.addEventListener('click', this.#toggleHandler);\n      } else if (this.actions[0].type === \"hold\" || this.actions[0].type === \"pauseHold\") {\n        this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n        this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n\n        // For mobile\n        this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n        this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n\n      } else if (this.actions[0].type === \"seek\") {\n        this.player.loop = true;\n        this.player.stop();\n        this.container.addEventListener('mousemove', this.#mousemoveHandler);\n        // For mobile\n        this.container.addEventListener('touchmove', this.#touchmoveHandler, { passive: false });\n        this.container.addEventListener('mouseout', this.#mouseoutHandler);\n      }\n    } else {\n      this.player.loop = true;\n      this.player.stop();\n      this.container.addEventListener('mousemove', this.#mousemoveHandler);\n      this.container.addEventListener('mouseleave', this.#mouseoutHandler);\n\n      // Init the animations that set states when the cursor is outside the container, so that they\n      // are visibly idle at the desired frame before first interaction with them\n      this.#cursorHandler(-1, -1);\n    }\n  }\n\n  initChainMode() {\n    this.#initInteractionMaps();\n    this.player.loop = false;\n    this.player.stop();\n    this.#chainedInteractionHandler({ ignorePath: false });\n  }\n\n  start() {\n    if (this.mode === 'scroll') {\n      if (this.player.isLoaded) {\n        this.initScrollMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initScrollMode();\n        });\n      }\n    } else if (this.mode === 'cursor') {\n      if (this.player.isLoaded) {\n        this.initCursorMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initCursorMode();\n        });\n      }\n    } else if (this.mode === 'chain') {\n      // When passing animation object to LI the player is already loaded\n      if (this.player.isLoaded) {\n        this.initChainMode();\n      } else {\n        this.player.addEventListener('DOMLoaded', () => {\n          this.initChainMode();\n        });\n      }\n    }\n  }\n\n  redefineOptions({ actions, container, mode, player, ...options }) {\n    this.stop();\n\n    // Save the original player entered by user, used for interaction chaining / loading animations on the fly\n    this.enteredPlayer = player;\n\n    // Resolve lottie instance specified in player option\n    if (!(typeof player === 'object' && player.constructor.name === 'AnimationItem')) {\n      if (typeof player === 'string') {\n        const elem = document.querySelector(player);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          player = elem.getLottie();\n        }\n      } else if (player instanceof HTMLElement && player.nodeName === LOTTIE_PLAYER_NODE) {\n        player = player.getLottie();\n      }\n\n      // Throw error no player instance has been successfully resolved\n      if (!player) {\n        let message = ERROR_PREFIX + \"Specified player:\" + player + \" is invalid.\";\n\n        throw new Error(message, player);\n      }\n    }\n\n    // Get the configured container element.\n    if (typeof container === 'string') {\n      container = document.querySelector(container);\n    }\n\n    // Use player wrapper as fallback if container couldn't be resolved.\n    if (!container) {\n      container = player.wrapper;\n    }\n\n    this.player = player;\n    this.loadedAnimation = this.player.path + this.player.fileName + \".json\";\n    this.attachedListeners = false;\n    this.container = container;\n    this.mode = mode;\n    this.actions = actions;\n    this.options = options;\n    this.assignedSegment = null;\n    this.scrolledAndPlayed = false;\n\n    // Interaction chaining\n    this.interactionIdx = 0;\n    this.clickCounter = 0;\n    this.playCounter = 0;\n    this.holdStatus = null;\n    this.stateHandler = new Map();\n    this.transitionHandler = new Map();\n\n    this.start();\n  }\n\n  stop() {\n    if (this.mode === 'scroll') {\n      window.removeEventListener('scroll', this.#scrollHandler, true);\n    }\n\n    if (this.mode === 'cursor') {\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('click', this.#toggleHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n      this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseleave', this.#mouseoutHandler);\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n    }\n\n    if (this.mode === 'chain') {\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('click', this.#clickHoverStateHandler);\n\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n      this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverStateHandler);\n      this.container.removeEventListener('touchstart', this.#clickHoverStateHandler);\n      this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n\n      this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n\n      if (this.player) {\n        try {\n          this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n          this.player.removeEventListener('complete', this.#onCompleteHandler);\n          this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n          this.player.removeEventListener('enterFrame', this.#holdHandler);\n        } catch (e) {\n          // User deleted the player before calling stop()\n          // Ignore\n        }\n      }\n    }\n    if (this.player) {\n      this.player.destroy();\n      this.player = null;\n    }\n  }\n\n  /**\n   * [chain mode]\n   * Init the state and transitions maps containing all the state and transition methods used for interaction chaining\n   */\n  #initInteractionMaps = () => {\n    if (!this.player)\n      return;\n\n    let loopState = () => {\n      if (this.actions[this.interactionIdx].loop) {\n        this.player.loop = parseInt(this.actions[this.interactionIdx].loop) - 1;\n      } else {\n        this.player.loop = true;\n      }\n      this.player.autoplay = true;\n    }\n    let autoplayState = () => {\n      this.player.loop = false;\n      this.player.autoplay = true;\n    }\n    let clickState = () => {\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.container.addEventListener('click', this.#clickHoverStateHandler);\n    }\n    let hoverState = () => {\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.container.addEventListener('mouseenter', this.#clickHoverStateHandler);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#clickHoverStateHandler, { passive: true });\n    }\n    let clickTransition = () => {\n      this.container.addEventListener('click', this.#clickHoverHandler);\n    }\n    let hoverTransition = () => {\n      this.container.addEventListener('mouseenter', this.#clickHoverHandler);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#clickHoverHandler, { passive: true });\n    }\n    let holdTransition = () => {\n      this.player.addEventListener('enterFrame', this.#holdHandler);\n      this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n    }\n    let holdState = () => {\n      this.container.addEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.addEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.addEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.addEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n    }\n    let repeatTransition = () => {\n      this.player.loop = true;\n      this.player.autoplay = true;\n      let handler = () => { this.#repeatTransition({ handler }) };\n      this.player.addEventListener('loopComplete', handler);\n    }\n    let onCompleteTransition = () => {\n      let state = this.actions[this.interactionIdx].state;\n\n      if (state === 'loop')\n        this.player.addEventListener('loopComplete', this.#onCompleteHandler);\n      else\n        this.player.addEventListener('complete', this.#onCompleteHandler);\n    }\n    let cursorSyncTransition = () => {\n      this.player.stop();\n      this.player.addEventListener('enterFrame', this.#cursorSyncHandler);\n      this.container.addEventListener('mousemove', this.#mousemoveHandler);\n      this.container.addEventListener('touchmove', this.#touchmoveHandler, { passive: false });\n      this.container.addEventListener('mouseout', this.#mouseoutHandler);\n    }\n    this.stateHandler.set('loop', loopState);\n    this.stateHandler.set('autoplay', autoplayState);\n    this.stateHandler.set('click', clickState);\n    this.stateHandler.set('hover', hoverState);\n    this.stateHandler.set('hold', holdState);\n    this.stateHandler.set('pauseHold', holdState);\n\n    this.transitionHandler.set('click', clickTransition);\n    this.transitionHandler.set('hover', hoverTransition);\n    this.transitionHandler.set('hold', holdTransition);\n    this.transitionHandler.set('pauseHold', holdTransition);\n    this.transitionHandler.set('repeat', repeatTransition);\n    this.transitionHandler.set('onComplete', onCompleteTransition);\n    this.transitionHandler.set('seek', cursorSyncTransition);\n  }\n\n  /**\n   * [chain mode]\n   * Handle hover state on chained interactions\n   */\n  #clickHoverStateHandler = () => {\n    let forceFlag = this.actions[this.interactionIdx].forceFlag;\n\n    if (!forceFlag && this.player.isPaused === true) {\n      this.#playSegmentHandler(true);\n    } else if (forceFlag) {\n      this.#playSegmentHandler(true);\n    }\n  }\n\n  // [cursor mode]\n  #toggleHandler = () => {\n    if (this.clickCounter === 0) {\n      this.player.play();\n      this.clickCounter++;\n    } else {\n      this.clickCounter++;\n      this.player.setDirection(this.player.playDirection * -1);\n      this.player.play();\n    }\n  }\n\n  /**\n   * [cursor + chain mode]\n   * Handle click and hover in both cursor and chain mode\n   */\n  #clickHoverHandler = () => {\n    let forceFlag = this.actions[this.interactionIdx].forceFlag;\n    let state = this.actions[this.interactionIdx].state;\n    let transition = this.actions[this.interactionIdx].transition;\n\n    // If we're in chain mode and the click or hover transition is used, otherwise just play the animation\n    if (this.mode === 'chain') {\n      // Check if there is a counter or not and make a transition\n      if (this.actions[this.interactionIdx].count) {\n        let clickLimit = parseInt(this.actions[this.interactionIdx].count);\n        if (this.clickCounter < clickLimit - 1) {\n          this.clickCounter += 1;\n          return;\n        }\n      }\n      // No click counter, so we remove the listeners and got to next interaction\n      this.clickCounter = 0;\n      // Transition when the animation has finished playing\n      if (!forceFlag && (transition === \"click\" && state === \"click\") || (transition === \"hover\" && state === \"hover\"))\n        this.transitionHandler.get(\"onComplete\").call();\n      else\n        this.nextInteraction();\n      this.container.removeEventListener('click', this.#clickHoverHandler);\n      this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n      return;\n    }\n    // Using goToAndPlay rather than this.#playSegmentHandler(forceFlag) because we're in cursor mode\n    // there for we want to play from the beginning\n    if (!forceFlag && this.player.isPaused === true) {\n      this.player.goToAndPlay(0, true);\n    } else if (forceFlag) {\n      this.player.goToAndPlay(0, true);\n    }\n  }\n\n  // [cursor mode]\n  #mousemoveHandler = e => {\n    this.#cursorHandler(e.clientX, e.clientY);\n  };\n\n  // [cursor mode]\n  #touchmoveHandler = e => {\n    // Allows for syncing on Y axis without scrolling the page\n    if (e.cancelable)\n      e.preventDefault();\n    this.#cursorHandler(e.touches[0].clientX, e.touches[0].clientY);\n  };\n\n  // [cursor mode]\n  #mouseoutHandler = () => {\n    this.#cursorHandler(-1, -1);\n  };\n\n\n  /**\n   * [chain mode]\n   * Handle when a segment of the animation has finished playing\n   */\n  #onCompleteHandler = () => {\n    if (this.actions[this.interactionIdx].state === 'loop') {\n      this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n    } else {\n      this.player.removeEventListener('complete', this.#onCompleteHandler);\n    }\n    this.nextInteraction();\n  }\n\n  // [chain mode]\n  #repeatTransition = ({ handler }) => {\n    let repeatAmount = 1;\n\n    if (this.actions[this.interactionIdx].repeat)\n      repeatAmount = this.actions[this.interactionIdx].repeat;\n    if (this.playCounter >= repeatAmount - 1) {\n      this.playCounter = 0;\n      this.player.removeEventListener('loopComplete', handler);\n      this.player.loop = false;\n      this.player.autoplay = false;\n      this.nextInteraction();\n    } else {\n      this.playCounter += 1;\n    }\n  }\n\n  /**\n   * [chain mode]\n   * TODO: How does this work with markers? Get marker duration?\n   */\n  #cursorSyncHandler = () => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    if (frames && this.player.currentFrame >= parseInt(frames[1]) - 1) {\n      this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n      this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n      this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n      setTimeout(this.nextInteraction, 0);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * TODO: How does this work with markers? Get marker duration?\n   *\n   * With the hold transition we can't use playSegment so we have to manually verify if\n   * The user held long enough and check if the current frame is within the segment limits\n   *\n   */\n  #holdHandler = () => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    if ((frames && this.player.currentFrame >= frames[1]) || (this.player.currentFrame >= this.player.totalFrames - 1)) {\n      this.player.removeEventListener('enterFrame', this.#holdHandler);\n      this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n      this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n      // For mobile\n      this.container.removeEventListener('touchstart', this.#holdTransitionEnter, { passive: true });\n      this.container.removeEventListener('touchend', this.#holdTransitionLeave, { passive: true });\n      this.player.pause();\n\n      this.holdStatus = false;\n      this.nextInteraction();\n    }\n    // Pause player so that reverse playback doesn't leave the set frame boundries\n    if (this.player.playDirection === -1 && frames && this.player.currentFrame < frames[0]) {\n      this.player.pause();\n    }\n  }\n\n  // [cursor + chain mode]\n  #holdTransitionEnter = () => {\n    // On first cursor enter needs check\n    if (this.player.playDirection === -1 || this.holdStatus === null || !this.holdStatus) {\n      this.player.setDirection(1);\n      this.player.play();\n      this.holdStatus = true;\n    }\n  }\n\n  // [cursor + chain mode]\n  #holdTransitionLeave = () => {\n    if (this.actions[this.interactionIdx].transition === \"hold\" ||\n      this.actions[this.interactionIdx].state === \"hold\" ||\n      this.actions[0].type === \"hold\") {\n      this.player.setDirection(-1);\n      this.player.play();\n    } else if (this.actions[this.interactionIdx].transition === \"pauseHold\" ||\n      this.actions[this.interactionIdx].state === \"pauseHold\" ||\n      this.actions[0].type === \"pauseHold\") {\n      this.player.pause();\n    }\n    this.holdStatus = false;\n  }\n\n  // [chain mode]\n  #clearStateListeners = () => {\n    this.container.removeEventListener('click', this.#clickHoverHandler);\n    this.container.removeEventListener('click', this.#clickHoverStateHandler);\n\n    this.container.removeEventListener('mouseenter', this.#clickHoverHandler);\n    this.container.removeEventListener('touchstart', this.#clickHoverHandler);\n    this.container.removeEventListener('touchmove', this.#touchmoveHandler);\n    this.container.removeEventListener('mouseenter', this.#clickHoverStateHandler);\n    this.container.removeEventListener('touchstart', this.#clickHoverStateHandler);\n    this.container.removeEventListener('mouseenter', this.#holdTransitionEnter);\n    this.container.removeEventListener('touchstart', this.#holdTransitionEnter);\n\n    this.container.removeEventListener('mouseleave', this.#holdTransitionLeave);\n    this.container.removeEventListener('mousemove', this.#mousemoveHandler);\n    this.container.removeEventListener('mouseout', this.#mouseoutHandler);\n    this.container.removeEventListener('touchend', this.#holdTransitionLeave);\n\n    if (this.player) {\n      try {\n        this.player.removeEventListener('loopComplete', this.#onCompleteHandler);\n        this.player.removeEventListener('complete', this.#onCompleteHandler);\n        this.player.removeEventListener('enterFrame', this.#cursorSyncHandler);\n        this.player.removeEventListener('enterFrame', this.#holdHandler);\n      } catch (e) {\n        // User deleted the player before calling stop()\n        // Ignore\n      }\n    }\n  }\n\n  jumpToInteraction = (index) => {\n    this.#clearStateListeners();\n    this.interactionIdx = index;\n    this.interactionIdx < 0 ? this.interactionIdx = 0 : this.interactionIdx;\n    this.nextInteraction(false);\n  }\n\n  // [chain mode]\n  nextInteraction = (incrementIndex = true) => {\n    this.oldInterctionIdx = this.interactionIdx;\n    // If state is hover or click we need to remove listeners\n    this.#clearStateListeners();\n    this.player.loop = false;\n\n    // Check if theres a jump-to before incrementing\n    let jumpToIndex = this.actions[this.interactionIdx].jumpTo;\n    if (jumpToIndex) {\n      // If jumpToIndex is inside action length jump to it otherwise go to first action\n      if (jumpToIndex >= 0 && jumpToIndex < this.actions.length) {\n        this.interactionIdx = jumpToIndex;\n        this.#chainedInteractionHandler({ ignorePath: false });\n      } else {\n        this.interactionIdx = 0;\n        this.player.goToAndStop(0, true);\n        this.#chainedInteractionHandler({ ignorePath: false });\n      }\n    } else {\n      // Go to next interaction\n      if (incrementIndex)\n        this.interactionIdx++;\n      if (this.interactionIdx >= this.actions.length) {\n        // Go back to the first interaction\n        if (this.actions[this.actions.length - 1].reset) {\n          this.interactionIdx = 0;\n          this.player.resetSegments(true);\n          if (this.actions[this.interactionIdx].frames)\n            this.player.goToAndStop(this.actions[this.interactionIdx].frames, true);\n          else\n            this.player.goToAndStop(0, true);\n          this.#chainedInteractionHandler({ ignorePath: false });\n        }\n        else {\n          this.interactionIdx = this.actions.length - 1;\n          this.#chainedInteractionHandler({ ignorePath: false });\n        }\n      } else {\n        this.#chainedInteractionHandler({ ignorePath: false });\n      }\n    }\n\n    // Emit event from the lottie-player element\n    this.container.dispatchEvent(new CustomEvent(\"transition\", {\n      bubbles: true,\n      composed: true,\n      detail: { oldIndex: this.oldInterctionIdx, newIndex: this.interactionIdx }\n    }));\n  }\n\n  /**\n   * [chain mode]\n   * Checks if frames are an array or string, and calls appropriate method to play animation\n   */\n  #playSegmentHandler = (forceFlag) => {\n    let frames = this.actions[this.interactionIdx].frames;\n\n    //If no frame segment is defined, play the whole animation\n    if (!frames) {\n      this.player.resetSegments(true);\n      this.player.goToAndPlay(0, true);\n      return;\n    }\n    // If using named markers\n    if (typeof frames === 'string') {\n      this.player.goToAndPlay(frames, forceFlag);\n    } else {\n      this.player.playSegments(frames, forceFlag);\n    }\n  }\n\n  /**\n   * [chain mode]\n   * Load a new animation using the path defined in the current interaction\n   */\n  #loadAnimationInChain = () => {\n    let path = this.actions[this.interactionIdx].path;\n\n    // The animation path declared on the lottie-player was saved in the constructor under 'enteredPlayer'\n    // We assume that the path on the lottie-player element is the animation to use in the first action\n    if (!path) {\n      // If we passed animationData to Lottie-Interactivity, load the animation data otherwise use the path\n      if (typeof this.enteredPlayer === 'object' && this.enteredPlayer.constructor.name === 'AnimationItem') {\n        path = this.enteredPlayer;\n\n        if (this.player === path) {\n          this.#chainedInteractionHandler({ ignorePath: true });\n          return;\n        }\n      } else {\n        path = this.loadedAnimation;\n        let fileName = path.substr(path.lastIndexOf('/') + 1);\n        fileName = fileName.substr(0, fileName.lastIndexOf('.json'));\n\n        // Prevents reloading animation the same animation\n        if (this.player.fileName === fileName) {\n          this.#chainedInteractionHandler({ ignorePath: true });\n          return;\n        }\n      }\n    }\n\n    // Force width and height on the container to retain its size while the next animation is being loaded\n    let lottieContainerSize = this.container.getBoundingClientRect();\n    let newContainerStyle = \"width: \" + lottieContainerSize.width + \"px !important; height: \" +\n      lottieContainerSize.height + \"px !important; background: \" + this.container.style.background;\n    this.container.setAttribute('style', newContainerStyle);\n\n    if (!(typeof this.enteredPlayer === 'object' && this.enteredPlayer.constructor.name === 'AnimationItem')) {\n      if (typeof this.enteredPlayer === 'string') {\n        const elem = document.querySelector(this.enteredPlayer);\n\n        if (elem && elem.nodeName === LOTTIE_PLAYER_NODE) {\n          // Prevents adding the listeners multiple times if multiple animations are needed to be loaded from actions\n          if (!this.attachedListeners) {\n            // Remove the styling that prevents flickering\n            elem.addEventListener(\"ready\", () => {\n              this.container.style.width = '';\n              this.container.style.height = '';\n            });\n            elem.addEventListener(\"load\", () => {\n              this.player = elem.getLottie();\n              this.#chainedInteractionHandler({ ignorePath: true });\n            });\n            this.attachedListeners = true;\n          }\n          // The LottieFiles player destroys the animation when a new one is Loaded\n          elem.load(path);\n        }\n      } else if (this.enteredPlayer instanceof HTMLElement && this.enteredPlayer.nodeName === LOTTIE_PLAYER_NODE) {\n        // Prevents adding the listeners multiple times if multiple animations are needed to be loaded from actions\n        if (!this.attachedListeners) {\n          // Remove the styling that prevents flickering\n          this.enteredPlayer.addEventListener(\"ready\", () => {\n            this.container.style.width = '';\n            this.container.style.height = '';\n          });\n          this.enteredPlayer.addEventListener(\"load\", () => {\n            this.player = this.enteredPlayer.getLottie();\n            this.#chainedInteractionHandler({ ignorePath: true });\n          });\n          this.attachedListeners = true;\n        }\n        // The LottieFiles player destroys the animation when a new one is Loaded\n        this.enteredPlayer.load(path);\n      }\n      // Throw error no player instance has been successfully resolved\n      if (!this.player) {\n        throw new Error(`${ERROR_PREFIX} Specified player is invalid.`, this.enteredPlayer);\n      }\n    } else {\n      if (window.lottie) {\n        this.stop();\n        // Removes svg animation contained inside\n        this.container.innerHTML = \"\";\n\n        if (typeof path === 'object' && path.constructor.name === 'AnimationItem') {\n          this.player = window.lottie.loadAnimation({\n            loop: false,\n            autoplay: false,\n            animationData: path.animationData,\n            container: this.container\n          });\n        }\n        else {\n          this.player = window.lottie.loadAnimation({\n            loop: false,\n            autoplay: false,\n            path,\n            container: this.container\n          });\n        }\n\n        this.player.addEventListener('DOMLoaded', () => {\n          // Remove the styling that prevents flickering\n          this.container.style.width = '';\n          this.container.style.height = '';\n          this.#chainedInteractionHandler({ ignorePath: true });\n        });\n      } else {\n        throw new Error(`${ERROR_PREFIX} A Lottie player is required.`);\n      }\n    }\n    // Reset counters\n    this.clickCounter = 0;\n    this.playCounter = 0;\n  }\n\n  /**\n   * [chain mode]\n   * Check the action object at the current interaction index and set the needed interaction listeners as well\n   * as any extra options\n   */\n  #chainedInteractionHandler = ({ ignorePath }) => {\n    let frames = this.actions[this.interactionIdx].frames;\n    let state = this.actions[this.interactionIdx].state;\n    let transition = this.actions[this.interactionIdx].transition;\n    let path = this.actions[this.interactionIdx].path;\n    let stateFunction = this.stateHandler.get(state);\n    let transitionFunction = this.transitionHandler.get(transition);\n    let speed = this.actions[this.interactionIdx].speed ? this.actions[this.interactionIdx].speed : 1;\n    let delay = this.actions[this.interactionIdx].delay ? this.actions[this.interactionIdx].delay : 0;\n\n    // Check if path is detected or that we are at the beginning again and reset\n    // If we are back at the first action, we need to reload the animation declared on the lottie-player element\n    if (!ignorePath && (path || (this.actions[this.actions.length - 1].reset && this.interactionIdx === 0))) {\n      this.#loadAnimationInChain();\n      return;\n    }\n    setTimeout(() => {\n      if (frames) {\n        this.player.autoplay = false;\n        this.player.resetSegments(true);\n        this.player.goToAndStop(frames[0], true);\n      }\n      if (stateFunction) {\n        stateFunction.call();\n      } else if (state === \"none\") {\n        this.player.loop = false;\n        this.player.autoplay = false;\n      }\n      if (transitionFunction) {\n        transitionFunction.call();\n      }\n      if (this.player.autoplay) {\n        this.player.resetSegments(true);\n        this.#playSegmentHandler(true);\n      }\n      this.player.setSpeed(speed);\n    }, delay);\n  }\n\n  // [cursor mode]\n  #cursorHandler = (x, y) => {\n    // Resolve cursor position if cursor is inside container\n    if (x !== -1 && y !== -1) {\n      // Get container cursor position\n      const pos = this.getContainerCursorPosition(x, y);\n\n      // Use the resolved position\n      x = pos.x;\n      y = pos.y;\n    }\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(({ position }) => {\n      if (position) {\n        if (Array.isArray(position.x) && Array.isArray(position.y)) {\n          return x >= position.x[0] && x <= position.x[1] && y >= position.y[0] && y <= position.y[1];\n        } else if (!Number.isNaN(position.x) && !Number.isNaN(position.y)) {\n          return x === position.x && y === position.y;\n        }\n      }\n\n      return false;\n    });\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek' || action.transition === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const xPercent = (x - action.position.x[0]) / (action.position.x[1] - action.position.x[0]);\n      const yPercent = (y - action.position.y[0]) / (action.position.y[1] - action.position.y[0]);\n\n      this.player.playSegments(action.frames, true);\n\n      if (action.position.y[0] < 0 && action.position.y[1] > 1) {\n        this.player.goToAndStop(Math.floor(xPercent * this.player.totalFrames), true);\n      } else {\n        this.player.goToAndStop(Math.ceil(((xPercent + yPercent) / 2) * this.player.totalFrames), true);\n      }\n    } else if (action.type === 'loop') {\n      this.player.playSegments(action.frames, true);\n    } else if (action.type === 'play') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (this.player.isPaused === true) {\n        this.player.resetSegments();\n      }\n      this.player.playSegments(action.frames);\n    } else if (action.type === 'stop') {\n      this.player.resetSegments(true);\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n\n  // [scroll mode]\n  #scrollHandler = () => {\n    // Get container visibility percentage\n    const currentPercent = this.getContainerVisibility();\n\n    // Find the first action that satisfies the current position conditions\n    const action = this.actions.find(\n      ({ visibility }) => currentPercent >= visibility[0] && currentPercent <= visibility[1],\n    );\n\n    // Skip if no matching action was found!\n    if (!action) {\n      return;\n    }\n\n    // Process action types:\n    if (action.type === 'seek') {\n      // Seek: Go to a frame based on player scroll position action\n      const start = action.frames[0];\n      const end = action.frames.length == 2 ? action.frames[1] : (this.player.totalFrames - 1);\n\n      // Use global frame reference for frames within the seek section.\n      // Without this, if you follow a seek with a loop and then scroll back up,\n      // it will treat frame numbers as relative to the loop.\n      if (this.assignedSegment !== null) {\n        this.player.resetSegments(true);\n        this.assignedSegment = null;\n      }\n\n      this.player.goToAndStop(\n        start + Math.round(\n          ((currentPercent - action.visibility[0]) / (action.visibility[1] - action.visibility[0])) *\n          (end - start)\n        ),\n        true,\n      );\n    } else if (action.type === 'loop') {\n      this.player.loop = true;\n      // Loop: Loop a given frames\n      if (this.assignedSegment === null) {\n        // if not playing any segments currently. play those segments and save to state\n        this.player.playSegments(action.frames, true);\n        this.assignedSegment = action.frames;\n      } else {\n        // if playing any segments currently.\n        //check if segments in state are equal to the frames selected by action\n        if (this.assignedSegment !== action.frames) {\n          // if they are not equal. new segments are to be loaded\n          this.player.playSegments(action.frames, true);\n          this.assignedSegment = action.frames;\n        } else {\n          // if they are equal the play method must be called only if lottie is paused\n          if (this.player.isPaused === true) {\n            this.player.playSegments(action.frames, true);\n            this.assignedSegment = action.frames;\n          }\n        }\n      }\n    } else if (action.type === 'play' || action.type === 'playOnce') {\n      // Play: Reset segments and continue playing full animation from current position\n      if (action.type === 'playOnce' && !this.scrolledAndPlayed) {\n        this.scrolledAndPlayed = true;\n        this.player.resetSegments(true);\n        if (action.frames) {\n          this.player.playSegments(action.frames, true);\n        } else {\n          this.player.play();\n        }\n        return;\n      } else if (action.type === 'play' && this.player.isPaused) {\n        this.player.resetSegments(true);\n        if (action.frames) {\n          this.player.playSegments(action.frames, true);\n        } else {\n          this.player.play();\n        }\n      }\n    } else if (action.type === 'stop') {\n      // Stop: Stop playback\n      this.player.goToAndStop(action.frames[0], true);\n    }\n  };\n}\n\nexport const create = options => {\n  const instance = new LottieInteractivity(options);\n  instance.start();\n\n  return instance;\n};\n\nexport default create;\n"],"names":["ERROR_PREFIX","_initInteractionMaps","WeakMap","_clickHoverStateHandler","_toggleHandler","_clickHoverHandler","_mousemoveHandler","_touchmoveHandler","_mouseoutHandler","_onCompleteHandler","_repeatTransition","_cursorSyncHandler","_holdHandler","_holdTransitionEnter","_holdTransitionLeave","_clearStateListeners","_playSegmentHandler","_loadAnimationInChain","_chainedInteractionHandler","_cursorHandler","_scrollHandler","LottieInteractivity","_ref","_this","this","actions","container","mode","player","options","_objectWithoutProperties","_excluded","_classCallCheck","_classPrivateFieldInitSpec","writable","value","holdTransition","addEventListener","_classPrivateFieldGet","passive","holdState","stateHandler","set","interactionIdx","loop","parseInt","autoplay","transitionHandler","handler","call","state","stop","forceFlag","isPaused","clickCounter","play","setDirection","playDirection","transition","count","clickLimit","get","nextInteraction","removeEventListener","goToAndPlay","e","clientX","clientY","cancelable","preventDefault","touches","_ref2","repeatAmount","repeat","playCounter","frames","currentFrame","setTimeout","totalFrames","pause","holdStatus","type","_defineProperty","index","incrementIndex","arguments","length","undefined","oldInterctionIdx","jumpToIndex","jumpTo","ignorePath","goToAndStop","reset","resetSegments","dispatchEvent","CustomEvent","bubbles","composed","detail","oldIndex","newIndex","playSegments","path","_typeof","enteredPlayer","constructor","name","fileName","loadedAnimation","substr","lastIndexOf","lottieContainerSize","getBoundingClientRect","newContainerStyle","width","height","style","background","setAttribute","elem","document","querySelector","nodeName","attachedListeners","getLottie","load","HTMLElement","Error","concat","window","lottie","innerHTML","loadAnimation","animationData","_ref3","stateFunction","transitionFunction","speed","delay","setSpeed","x","y","pos","getContainerCursorPosition","action","find","_ref4","position","Array","isArray","Number","isNaN","xPercent","yPercent","Math","floor","ceil","currentPercent","getContainerVisibility","_ref5","visibility","start","end","assignedSegment","round","scrolledAndPlayed","wrapper","Map","key","_this$container$getBo","top","innerHeight","cursorX","cursorY","_this$container$getBo2","left","_this2","isLoaded","initScrollMode","initCursorMode","initChainMode","_ref6","_excluded2","destroy","create","instance"],"mappings":"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"}